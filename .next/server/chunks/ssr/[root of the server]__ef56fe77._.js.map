{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mayank/Desktop/cosmicteams/src/lib/firebase.ts"],"sourcesContent":["import { initializeApp, getApps, FirebaseApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCQf_QXzyZkyRxsbo91PJmdwjEn3lVfDTo\",\n  authDomain: \"cosmicteams-bbf29.firebaseapp.com\",\n  projectId: \"cosmicteams-bbf29\",\n  storageBucket: \"cosmicteams-bbf29.appspot.com\",\n  messagingSenderId: \"807144888137\",\n  appId: \"1:807144888137:web:2621a3ac917d9675d6ec98\"\n};\n\n// Initialize Firebase (client-side only)\nlet firebaseApp: FirebaseApp | undefined;\nlet auth: any = null;\nlet db: any = null;\nlet storage: any = null;\nlet googleProvider: any = null;\n\n// Only initialize Firebase on the client side\nif (typeof window !== 'undefined') {\n  if (!getApps().length) {\n    firebaseApp = initializeApp(firebaseConfig);\n  } else {\n    firebaseApp = getApps()[0];\n  }\n\n  if (firebaseApp) {\n    auth = getAuth(firebaseApp);\n    db = getFirestore(firebaseApp);\n    storage = getStorage(firebaseApp);\n    googleProvider = new GoogleAuthProvider();\n  }\n}\n\nexport { auth, db, storage, googleProvider };\nexport default firebaseApp;"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,wCAAwC;AACxC,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,yCAAyC;AACzC,IAAI;AACJ,IAAI,OAAY;AAChB,IAAI,KAAU;AACd,IAAI,UAAe;AACnB,IAAI,iBAAsB;AAE1B,8CAA8C;AAC9C,uCAAmC;;AAanC;;uCAGe","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mayank/Desktop/cosmicteams/src/lib/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  signInWithPopup,\n  signInWithRedirect,\n  getRedirectResult,\n  User,\n  UserCredential,\n  browserPopupRedirectResolver,\n  GoogleAuthProvider,\n  updateProfile,\n} from 'firebase/auth';\nimport { auth, googleProvider, db } from './firebase';\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signUp: (email: string, password: string, username?: string) => Promise<UserCredential>;\n  signIn: (email: string, password: string) => Promise<UserCredential>;\n  signInWithGoogle: () => Promise<UserCredential | void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    // Check for redirect result on component mount (for Google Auth redirect)\n    getRedirectResult(auth)\n      .then((result) => {\n        if (result?.user) {\n          // User signed in via redirect\n          setUser(result.user);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Redirect sign-in error:\", error);\n      });\n\n    return unsubscribe;\n  }, []);\n\n  const signUp = async (email: string, password: string, username?: string) => {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Set display name if username provided\n    if (username && user) {\n      await updateProfile(user, {\n        displayName: username\n      });\n      \n      // Create user profile document in Firestore\n      await setDoc(doc(db, 'userProfiles', user.uid), {\n        email: user.email,\n        username: username,\n        displayName: username,\n        createdAt: serverTimestamp(),\n        hasSetUsername: true\n      });\n    }\n    \n    return userCredential;\n  };\n\n  const signIn = (email: string, password: string) => {\n    return signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const signInWithGoogle = async () => {\n    try {\n      // Try using popup first (preferred for better UX)\n      googleProvider.setCustomParameters({\n        prompt: 'select_account'\n      });\n      const result = await signInWithPopup(auth, googleProvider, browserPopupRedirectResolver);\n      \n      // Create/update user profile in Firestore for Google Auth users\n      const user = result.user;\n      if (user) {\n        // Check if the user profile exists\n        await setDoc(doc(db, 'userProfiles', user.uid), {\n          email: user.email,\n          displayName: user.displayName || user.email?.split('@')[0] || 'User',\n          photoURL: user.photoURL,\n          createdAt: serverTimestamp(),\n          lastLogin: serverTimestamp(),\n          hasSetUsername: false // Default to false for Google Auth users\n        }, { merge: true });\n      }\n      \n      return result;\n    } catch (error: any) {\n      // If popup fails or is blocked, fall back to redirect\n      if (error.code === 'auth/popup-blocked' || \n          error.code === 'auth/popup-closed-by-user' ||\n          error.code === 'auth/cancelled-popup-request') {\n        console.log(\"Popup was blocked or closed, falling back to redirect method\");\n        await signInWithRedirect(auth, googleProvider);\n        // Redirect will happen here, no need to return anything\n        return;\n      }\n      // Re-throw other errors\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    return signOut(auth);\n  };\n\n  const value = {\n    user,\n    loading,\n    signUp,\n    signIn,\n    signInWithGoogle,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mayank/Desktop/cosmicteams/src/lib/ProfileContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  collection, \n  doc, \n  getDoc, \n  setDoc, \n  updateDoc, \n  getDocs, \n  query, \n  where, \n  Firestore, \n  DocumentData,\n  DocumentReference\n} from 'firebase/firestore';\nimport { \n  updateProfile, \n  updatePassword, \n  updateEmail, \n  EmailAuthProvider, \n  reauthenticateWithCredential,\n  User\n} from 'firebase/auth';\nimport { \n  ref, \n  uploadBytes, \n  getDownloadURL, \n  deleteObject,\n  StorageReference \n} from 'firebase/storage';\nimport { db, storage } from './firebase';\nimport { useAuth } from './AuthContext';\n\n// Game mode types\nexport type GameMode = 'neth-op' | 'axe' | 'smp' | 'cpvp' | 'sword' | 'uhc';\n\n// Tier format: \"LT1\", \"HT5\", etc.\nexport type TierValue = `${'LT' | 'HT'}${1 | 2 | 3 | 4 | 5}`;\n\nexport interface GameTier {\n  mode: GameMode;\n  tier: TierValue;\n}\n\nexport interface ProfileData {\n  displayName?: string;\n  photoURL?: string;\n  bio?: string;\n  email?: string;\n  username?: string;\n  profileMusic?: string | null;\n  musicType?: string | null;\n  gameTiers?: { [key in GameMode]?: TierValue };\n  canCreateTeams?: boolean;\n  lastUpdated?: number;\n  createdAt?: number;\n  cosmicTokens?: number;\n  spinnerUsed?: number;\n  lastSpinTime?: number;\n  avatarDecorations?: string[];\n  activeAvatarDecoration?: string;\n  spinHistory?: {time: number, prize: any, type?: string}[];\n  brokeCrateUsed?: number;\n  lastBrokeCrateTime?: number;\n  legendCrateUsed?: number;\n  lastLegendCrateTime?: number;\n  avatars?: string[];\n  teamBanners?: string[];\n  profileDecorations?: string[];\n  purchasedItems?: string[];\n  activeProfileBackground?: string;\n}\n\ninterface ProfileContextType {\n  profile: ProfileData | null;\n  loading: boolean;\n  updating: boolean;\n  error: string | null;\n  updateProfileData: (data: Partial<ProfileData>) => Promise<void>;\n  uploadProfileImage: (file: File) => Promise<string>;\n  changePassword: (currentPassword: string, newPassword: string) => Promise<void>;\n  changeEmail: (currentPassword: string, newEmail: string) => Promise<void>;\n  updateAllGameTiers: (tiers: { [key in GameMode]?: TierValue }) => Promise<void>;\n}\n\nconst ProfileContext = createContext<ProfileContextType | null>(null);\n\nexport function useProfile() {\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfile must be used within a ProfileProvider');\n  }\n  return context;\n}\n\nexport function ProfileProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [updating, setUpdating] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch user profile data when user changes\n  useEffect(() => {\n    async function fetchProfile() {\n      if (!user) {\n        setProfile(null);\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        // Initialize with data from auth\n        const initialProfile: ProfileData = {\n          displayName: user.displayName || '',\n          photoURL: user.photoURL || '',\n          email: user.email || '',\n          username: user.email ? user.email.split('@')[0] : '',  // Default username from email\n          profileMusic: null,\n          musicType: null,\n          gameTiers: {\n            'neth-op': 'LT1',\n            'axe': 'LT1',\n            'smp': 'LT1',\n            'cpvp': 'LT1',\n            'sword': 'LT1',\n            'uhc': 'LT1'\n          },\n          canCreateTeams: true,\n          lastUpdated: Date.now(),\n          createdAt: Date.now(),\n          cosmicTokens: 100, // Start with 100 tokens\n          spinnerUsed: 0,    // Track spinner usage\n          lastSpinTime: 0    // Track last spin time\n        };\n\n        // Try to get additional data from Firestore\n        if (user.uid && db) {\n          const docRef = doc(db, 'userProfiles', user.uid);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n            // Merge Firestore data with auth data\n            setProfile({ ...initialProfile, ...docSnap.data() as Partial<ProfileData> });\n          } else {\n            // If no Firestore document exists, create one with initial data\n            await setDoc(docRef, {\n              ...initialProfile,\n              createdAt: Date.now(),\n              lastUpdated: Date.now(),\n            });\n            setProfile(initialProfile);\n          }\n        } else {\n          setProfile(initialProfile);\n        }\n      } catch (err) {\n        console.error('Error fetching user profile:', err);\n        setError('Failed to load profile data');\n        // Still set basic profile from auth\n        if (user) {\n          setProfile({\n            displayName: user.displayName || '',\n            photoURL: user.photoURL || '',\n            email: user.email || '',\n            username: user.email ? user.email.split('@')[0] : '',  // Default username from email\n            profileMusic: null,\n            musicType: null,\n          });\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchProfile();\n  }, [user, db]);\n\n  // Update profile data in both Firebase Auth and Firestore\n  const updateProfileData = async (data: Partial<ProfileData>) => {\n    if (!user) return;\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Update auth profile if name or photo has changed\n      if (data.displayName || data.photoURL) {\n        const updateData: { displayName?: string; photoURL?: string } = {};\n        if (data.displayName) updateData.displayName = data.displayName;\n        if (data.photoURL) updateData.photoURL = data.photoURL;\n        \n        await updateProfile(user, updateData);\n      }\n\n      // Validate token amount if it's being updated to prevent negative values\n      if (data.cosmicTokens !== undefined) {\n        if (data.cosmicTokens < 0) {\n          throw new Error('Token amount cannot be negative');\n        }\n        // Make sure we're storing tokens as a number\n        data.cosmicTokens = Number(data.cosmicTokens);\n      }\n\n      // Update Firestore document\n      if (user.uid && db) {\n        const docRef = doc(db, 'userProfiles', user.uid);\n        \n        // Create a new object with the updates\n        const updateObject = {\n          ...data,\n          lastUpdated: Date.now()\n        };\n        \n        await updateDoc(docRef, updateObject);\n        \n        // Get the updated document to confirm changes\n        const updatedDoc = await getDoc(docRef);\n        const updatedData = updatedDoc.data() as ProfileData;\n        \n        // Update local state with the confirmed data from the database\n        setProfile(prev => prev ? { ...prev, ...updatedData } : null);\n      } else {\n        // Just update local state if Firestore isn't available\n        setProfile(prev => prev ? { ...prev, ...data } : null);\n      }\n    } catch (err) {\n      console.error('Error updating profile:', err);\n      setError('Failed to update profile');\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Upload profile image to Firebase Storage\n  const uploadProfileImage = async (file: File): Promise<string> => {\n    if (!user) throw new Error('User not authenticated');\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Validate file size (max 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        throw new Error('Image file is too large. Please select a file under 2MB.');\n      }\n      \n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        throw new Error('Please select a valid image file (JPG, PNG, etc.)');\n      }\n      \n      // Create a reference to the file location\n      const storageRef = ref(storage, `profile-images/${user.uid}/${Date.now()}-${file.name}`);\n      \n      // Delete previous profile image if exists and is a Storage URL\n      if (profile?.photoURL && profile.photoURL.includes('firebasestorage.googleapis.com')) {\n        try {\n          const oldImageRef = ref(storage, profile.photoURL);\n          await deleteObject(oldImageRef);\n        } catch (err) {\n          // Ignore errors when trying to delete old images\n          console.log('Previous image not found or already deleted');\n        }\n      }\n      \n      // Upload the file\n      await uploadBytes(storageRef, file);\n      \n      // Get the download URL\n      const downloadURL = await getDownloadURL(storageRef);\n      \n      // Update profile with new image URL\n      await updateProfileData({ photoURL: downloadURL });\n      \n      return downloadURL;\n    } catch (err) {\n      console.error('Error uploading profile image:', err);\n      setError(err instanceof Error ? err.message : 'Failed to upload profile image');\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Update a single game tier\n  const updateGameTier = async (mode: GameMode, tier: TierValue) => {\n    if (!user) return;\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Copy current tiers or create new object if none exists\n      const currentTiers = profile?.gameTiers || {} as Record<GameMode, TierValue>;\n      \n      // Update the specific game mode tier\n      const updatedTiers = {\n        ...currentTiers,\n        [mode]: tier\n      };\n      \n      // Update in Firestore\n      if (user.uid) {\n        await updateProfileData({ gameTiers: updatedTiers });\n      }\n    } catch (err) {\n      console.error('Error updating game tier:', err);\n      setError('Failed to update game tier');\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Update all game tiers at once\n  const updateAllGameTiers = async (tiers: { [key in GameMode]?: TierValue }) => {\n    if (!user) return;\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Update in Firestore\n      if (user.uid) {\n        await updateProfileData({ gameTiers: tiers });\n      }\n    } catch (err) {\n      console.error('Error updating game tiers:', err);\n      setError('Failed to update game tiers');\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Change user password\n  const changePassword = async (currentPassword: string, newPassword: string) => {\n    if (!user || !user.email) {\n      throw new Error('User not authenticated or email not available');\n    }\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Reauthenticate user first\n      const credential = EmailAuthProvider.credential(user.email, currentPassword);\n      await reauthenticateWithCredential(user, credential);\n      \n      // Change password\n      await updatePassword(user, newPassword);\n    } catch (err: any) {\n      console.error('Error changing password:', err);\n      if (err.code === 'auth/wrong-password') {\n        setError('Current password is incorrect');\n      } else {\n        setError('Failed to change password');\n      }\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Change user email\n  const changeEmail = async (currentPassword: string, newEmail: string) => {\n    if (!user || !user.email) {\n      throw new Error('User not authenticated or email not available');\n    }\n    \n    setUpdating(true);\n    setError(null);\n\n    try {\n      // Reauthenticate user first\n      const credential = EmailAuthProvider.credential(user.email, currentPassword);\n      await reauthenticateWithCredential(user, credential);\n      \n      // Change email\n      await updateEmail(user, newEmail);\n      \n      // Update profile data\n      await updateProfileData({ email: newEmail });\n    } catch (err: any) {\n      console.error('Error changing email:', err);\n      if (err.code === 'auth/wrong-password') {\n        setError('Current password is incorrect');\n      } else if (err.code === 'auth/email-already-in-use') {\n        setError('This email is already in use by another account');\n      } else {\n        setError('Failed to change email');\n      }\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  const value = {\n    profile,\n    loading,\n    updating,\n    error,\n    updateProfileData,\n    uploadProfileImage,\n    changePassword,\n    changeEmail,\n    updateAllGameTiers\n  };\n\n  return (\n    <ProfileContext.Provider value={value}>\n      {children}\n    </ProfileContext.Provider>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 815, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mayank/Desktop/cosmicteams/src/lib/clientUtils.ts"],"sourcesContent":["'use client';\r\n\r\nexport const preloadCommonPages = (): void => {\r\n  // Only run in browser\r\n  if (typeof window === 'undefined') return;\r\n\r\n  // Preload common navigation paths after page load\r\n  window.addEventListener('load', () => {\r\n    const pagesToPreload = ['/login', '/register', '/dashboard', '/tier'];\r\n    \r\n    // Wait until page is fully loaded and idle\r\n    if ('requestIdleCallback' in window) {\r\n      (window as any).requestIdleCallback(() => {\r\n        pagesToPreload.forEach(path => {\r\n          const link = document.createElement('link');\r\n          link.rel = 'prefetch';\r\n          link.href = path;\r\n          document.head.appendChild(link);\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// Initialize reveal animation for elements as they scroll into view\r\nexport const initScrollReveal = (): (() => void) => {\r\n  if (typeof window === 'undefined') return () => {};\r\n  \r\n  const handleScroll = () => {\r\n    const reveals = document.querySelectorAll('.reveal');\r\n    \r\n    reveals.forEach(element => {\r\n      const windowHeight = window.innerHeight;\r\n      const revealTop = element.getBoundingClientRect().top;\r\n      const revealPoint = 150;\r\n      \r\n      if (revealTop < windowHeight - revealPoint) {\r\n        element.classList.add('active');\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Initial check\r\n  handleScroll();\r\n  \r\n  // Add event listener\r\n  window.addEventListener('scroll', handleScroll);\r\n  \r\n  // Return cleanup function\r\n  return () => window.removeEventListener('scroll', handleScroll);\r\n};\r\n\r\n// Image preloading utility\r\nexport const preloadImage = (src: string): void => {\r\n  if (typeof window === 'undefined') return;\r\n  \r\n  const img = new Image();\r\n  img.src = src;\r\n};\r\n\r\n// Optimize auth processes\r\nexport const optimizeAuthProcess = (): void => {\r\n  // Warm up Firebase auth connection\r\n  if (typeof window !== 'undefined') {\r\n    // Preload auth-related domains\r\n    const domains = [\r\n      'https://identitytoolkit.googleapis.com',\r\n      'https://securetoken.googleapis.com'\r\n    ];\r\n    \r\n    domains.forEach(domain => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preconnect';\r\n      link.href = domain;\r\n      document.head.appendChild(link);\r\n    });\r\n  }\r\n}; "],"names":[],"mappings":";;;;;;AAAA;AAEO,MAAM,qBAAqB;IAChC,sBAAsB;IACtB,wCAAmC;;AAkBrC;AAGO,MAAM,mBAAmB;IAC9B,wCAAmC,OAAO,KAAO;;IAEjD,MAAM;AAsBR;AAGO,MAAM,eAAe,CAAC;IAC3B,wCAAmC;;IAEnC,MAAM;AAER;AAGO,MAAM,sBAAsB;IACjC,mCAAmC;IACnC,uCAAmC;;IAanC;AACF","debugId":null}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mayank/Desktop/cosmicteams/src/app/Providers.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { AuthProvider } from '@/lib/AuthContext';\r\nimport { ProfileProvider } from '@/lib/ProfileContext';\r\nimport { preloadCommonPages, optimizeAuthProcess } from '@/lib/clientUtils';\r\n\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  useEffect(() => {\r\n    // Preload common pages for faster navigation\r\n    preloadCommonPages();\r\n    \r\n    // Optimize auth process\r\n    optimizeAuthProcess();\r\n  }, []);\r\n  \r\n  return (\r\n    <AuthProvider>\r\n      <ProfileProvider>\r\n        {children}\r\n      </ProfileProvider>\r\n    </AuthProvider>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,6CAA6C;QAC7C,CAAA,GAAA,yHAAA,CAAA,qBAAkB,AAAD;QAEjB,wBAAwB;QACxB,CAAA,GAAA,yHAAA,CAAA,sBAAmB,AAAD;IACpB,GAAG,EAAE;IAEL,qBACE,8OAAC,0HAAA,CAAA,eAAY;kBACX,cAAA,8OAAC,6HAAA,CAAA,kBAAe;sBACb;;;;;;;;;;;AAIT","debugId":null}}]
}